#!/opt/local/bin/perl
#
# A command line slack client using the Slack websocket API
# SSL errors require Crypt::SSLeay, so we include it here.
#
use warnings;
use strict;
use FindBin '$Bin';
use lib "$Bin/";
use Slack;
use Data::Dumper;
use AnyEvent::ReadLine::Gnu;
#use Term::ReadLine;
use Term::ANSIColor 2.00 qw(:pushpop);
use Getopt::Long qw(:config no_ignore_case require_order);
use POSIX 'strftime';

my $usage = <<"";
Usage: $0 [options]
Options:
  -v | --verbose         Print debugging info on packets
  -t | --token token     Authorization token (default is to read from file)
  -u | --user name       User name to use as a bot
  -c | --channel name    Channel to send to

my $log = \*STDERR;
my $token;
my $channel;
my $user;
my $verbose;
my %watch_list;

GetOptions(
	"t|token=s"	=> \$token,
	"u|username=s"	=> \$user,
	"c|channel=s"	=> \$channel,
	"v|verbose+"	=> \$verbose,
	"h|?|help"	=> sub { print $usage; exit 0; },
) or die $usage;

# Read the token from a file, unless it was specified on the command line
$token ||= do "$Bin/slack.token";

my $s = Slack->new($token, $user)
	or die "Unable to create slack\n";

my $term;

sub debug
{
	my ($s,$j) = @_;

	$term->hide();
	print "$j->{type}: unhandled\n";
	#print  "DEBUG:\n", Dumper($j);
	$term->show();
}

my $last_user = '';
my $last_channel = '';

sub message
{
	my ($s,$j) = @_;
	my $edited = '';

	# skip anything not on the user's watch list
	my $channel = $j->{channel};
	return unless $watch_list{$channel};

	if (exists $j->{subtype} and $j->{subtype} eq 'message_changed')
	{
		$j = $j->{message};
		$edited = LOCALCOLOR RED " (edited)";
	}

	my $user = $j->{user};

	# hide the readline
	$term->hide();

	warn Dumper($j) unless $user;

	if ($user ne $last_user or $channel ne $last_channel)
	{
		$last_user = $user;
		$last_channel = $channel;
		my $username = $s->username($user);
		my $channel_name = $s->channel($channel);
		my $time = strftime("%F %T", localtime($j->{ts}));

		print LOCALCOLOR YELLOW BOLD "$username";
		print LOCALCOLOR YELLOW "\@$channel_name: $time\n";
	}

	# filter the text
	local $_ = $j->{text};

	# replace entities
	s/&lt;/>/msg;

	# replace the user names
	s/<\@(U[^>]*)>/LOCALCOLOR BOLD "@".$s->username($1)/msge;
		
	print "$_$edited\n";

	# ask readline to redisplay
	$term->show();
}


sub process_command
{
	my $line = shift;
	if($line =~ m:^/join (.*)$:)
	{
		my $channel = $1;
		my $id = $s->channel_id($channel);
		unless($id)
		{
			warn "$channel: No such channel. Use /list\n";
			return;
		}
		$s->{channel} = $id;
		$watch_list{$id} = 1;
		$AnyEvent::ReadLine::Gnu::prompt = "$channel> ";
		$term->hide();
		$term->show();
		return;
	}

	if ($line =~ m:^/list:)
	{
		for my $name (keys %{$s->{channelnames}})
		{
			my $channel = $s->{channelnames}{$name};
			my $flag = $watch_list{$channel->{id}} ? " *" : '';
			print "$name$flag\n";
		}
		return;
	}

	if ($line =~ m:^/watch (.*)$:)
	{
		my $channel = $1;
		my $id = $s->channel_id($channel);
		unless($id)
		{
			warn "$channel: No such channel. Use /list\n";
			return;
		}
		$watch_list{$id} = 1;
		return;
	}
	if ($line =~ m:^/unwatch (.*)$:)
	{
		my $channel = $1;
		my $id = $s->channel_id($channel);
		unless($id)
		{
			warn "$channel: No such channel. Use /list\n";
			return;
		}
		$watch_list{$id} = 0;
		return;
	}
		

	warn "Unknown command\n";
}


sub find_user
{
	my $user = shift;
	return "\@$user" unless exists $s->{usernames}{$user};
	
	my $t = "<\@" . $s->{usernames}{$user}{id} . ">";
	return $t;
}


$term = AnyEvent::ReadLine::Gnu->new(
	prompt => "> ",
	on_line	=> sub {
		my $line = shift;
		#warn "Read '$line'\n";

		if ($line =~ m:^/:)
		{
			$term->hide();
			process_command($line);
			$term->show();
		} elsif (not defined $s->{channel})
		{
			warn "No channel selected! Use /join to join a channel\n";
		} else {
			# attempt to find any usernames
			$line =~ s/\@(\w+)/find_user($1)/msge;

			$s->send($line);
		}
	},
);


my $last_j;

$s->{verbose} = $verbose;

$s->websocket(
	hello => sub {
		#warn "Connected!\n";
	},
	close	=> sub { 
		warn "close method called\n";
		exit(0);
	},
	presence_change => sub {
		my ($s,$j) = @_;
		$last_user = '';
		$term->hide();
		print LOCALCOLOR YELLOW BOLD $s->username($j->{user});
		print ": $j->{presence}\n";
		$term->show();
	},
	message => \&message,
	user_typing => sub {},
	channel_marked => sub {},
	debug => \&debug,
) or die "websocket failed\n";

